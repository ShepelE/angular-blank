/**
 * Created by evgen on 10.12.15.
 */
(function () {
    'use strict';
    angular.module('string.config', [])
        .constant("STRING_CONFIG", {
            disconnect:"No Internet connection",
            loading:"Loading..."
        });
}());
/**
 * Created by evgen on 29.06.16.
 */
(function () {
    'use strict';
    angular.module('400handlers.config', [])
        .constant("HANDLERS400_CONFIG", [
            {
                status:401,
                path:'login'
            },
            {//subscribe period ends
                status:426,
                path:'stripe/'
            },
            {//recommendation engine fails: 2 same recipes
                status:601,
                message:'core returned 2 same recipes'
            },
            {//add algorythm fails: 2 same recipes
                status:602,
                message:'algorythm chose 2 same recipes'
            },
            {//on lost connection
                status:-1,
                message:'Connection lost... Try later please!'
            }
        ]);
}());
/**
 * Created by evgen on 07.02.2017.
 */
(function () {
	'use strict';
	angular.module('inAppPurchases', [
		'ionicPopupWrapper.service'
	])
		.controller('InAppPurchasesCtrl', ["$scope", "$state", "$stateParams", "$timeout", "IonicPopupWrapperService", function ($scope, $state, $stateParams, $timeout, IonicPopupWrapperService) {
			var isBlockedSubmit = false;

			$scope.check = function (index) {
				var _checkedPurchase = _.find($scope.IAP, {checked: true});
				if (_checkedPurchase) {
					_checkedPurchase.checked = false;
				}
				$scope.IAP[index].checked = true;
			};

			$scope.submit = function () {
				// block submit button
				if (!isBlockedSubmit) {
					isBlockedSubmit = true;
					//need to find checked subscription
					var _activeSub = _.find($scope.IAP, {checked: true}); //it is already checked if any sub is checked

				}
				// unblock submit button in a second
				$timeout(function () {
					isBlockedSubmit = false;
				}, 1000);
			};
		}]);
})();

/**
 * Created by Konstantin Glushko on 15.11.16.
 */
(function () {
	'use strict';
	angular.module('inAppPurchases.config', [])
		.constant("IN_APP_PURCHASES",
			{
				iOS: [
				]
			}
		)
		.constant("IN_APP_PURCHASES_STRINGS", {
			errorTitle: 'Something went wrong',
			loading: 'Loading Products...',
			purchasing: 'Purchasing...',
			productError: 'Products don\'t exist',
			platformError: 'The platform isn\'t Android or iOS. You can\'t load products',
			selectProduct: 'Please, select one of products',
			successPurchase: 'Purchase was successful!',
			restorePurchases: 'Purchases history wasn\'t restore',
			hasActiveSubscriptions: 'You already have an active subscription',
			noActiveSubscriptions: 'You don\'t have an active subscription',
			cancelSubscription: 'Subscription now is canceled'
		});
}());

/**
 * Created by evgen on 07.02.2017.
 */
(function () {
    'use strict';
    angular.module('inAppPurchases.routes', [
        'inAppPurchases'
    ])
        .config(["$stateProvider", function ($stateProvider) {
            $stateProvider
                .state('inAppPurchases', {
                    url: "/inAppPurchases",
                    cache: false,
                    clear: true,
                    templateUrl: "src/inAppPurchases/inAppPurchases.html",
                    controller: 'InAppPurchasesCtrl'
                });
        }]);
})();

/**
 * Created by evgen on 07.02.2017.
 */
(function () {
    'use strict';
    angular.module('login', [
        'login.service',
        'loader.service'
    ])
        .controller('LoginCtrl', ["$scope", "$state", "$cordovaKeyboard", "$ionicPlatform", "LoginService", "LoaderService", function ($scope, $state, $cordovaKeyboard, $ionicPlatform, LoginService, LoaderService) {
            LoginService.clearAllData();
            var _loader = LoaderService.initLoader();
            _loader.hide();

            $ionicPlatform.ready(function () {
                if (window.cordova) {
                    $cordovaKeyboard.hideAccessoryBar(true);
                }
            });

            window.addEventListener('native.keyboardshow', keyboardShowHandler);
            function keyboardShowHandler(e){
                console.log('native keyboard show');
                var _inputs = document.getElementsByTagName('input');
                var _selects = document.getElementsByTagName('select');

                var _hide = true;
                for (var i = 0; i < _inputs.length; i++) {
                    if(_inputs[i] === document.activeElement) {
                        _hide = false;
                        break;
                    }
                }
                if (_hide) {
                    for (var i = 0; i < _selects.length; i++) {
                        if(_selects[i] === document.activeElement) {
                            _hide = false;
                            break;
                        }
                    }
                }
                if(cordova.plugins.Keyboard.isVisible && _hide){
                    document.activeElement.blur();
                    _inputs[0].focus();
                }
            }

            $scope.user = {};
            //clear previous error and try again
            $scope.login = function (loginForm) {
                if(loginForm.$valid) {
                    if($scope.user && $scope.user.error) {
                        delete $scope.user.error;
                    }
                    console.log('try to log in user: ', $scope.user);
                    LoginService.login($scope.user).then(_onSuccessLogin.bind(this, $scope.user.email), _onRejectLogin);
                }
            };
            //if success - choose state to go to
            function _onSuccessLogin (email, state) {
                console.log('Success authorization with login:|'+$scope.user.email+'| and password:|'+$scope.user.password+'|');
                if(state.params){
                    if (window.cordova) {
                        StripeService.getCustomers()
                            .then(function (customers) {
                                var customer = _.find(customers.data, {email: email});
                                if (!customer) StripeService.customersCreate(email)
                                    .then(function () {
                                        $state.go(state.state, state.params);
                                    });
                                else {
                                    $state.go(state.state, state.params);
                                }
                            });
                    }
                    else{
                        $state.go(state.state, state.params);
                    }
                } else {
                    $state.go(state.state);
                }
            }
            //else - write an error
            function _onRejectLogin (errorObj) {
                console.log('Reject authorization with login:|'+$scope.user.email+'| and password:|'+$scope.user.password+'| : ', errorObj);
                if(!errorObj.status || errorObj.status===-1){
                    $scope.user.error = "No response from server";
                } else {
                    if (!errorObj.data.error) {
                        if(errorObj.status === 426) {
                            $scope.user.error = null;
                        }
                    } else {
                        $scope.user.error = errorObj.data.error.message;
                    }
                }
            }

            $scope.facebookLogin = function () {
                LoginService.facebookLogin().then(_onSuccessLogin.bind(this, $scope.user.email), _onRejectLogin);
            };

            $scope.googlePlusLogin = function () {
                LoginService.googlePlusLogin().then(_onSuccessLogin.bind(this, $scope.user.email), _onRejectLogin);
            };
        }]);
})();
/**
 * Created by evgen on 07.02.2017.
 */
(function () {
    'use strict';
    angular.module('login.service', [
        'LocalStorageModule'
    ])
        .service('LoginService', ["$http", "$location", "localStorageService", function ($http, $location, localStorageService) {
            this.login = function (user) {
                localStorageService.set('user', user);
                $http.defaults.headers.common["Authorization"] = user.password;
            };

            this.getUser = function () {
                localStorageService.get('user');
            };

            this.clearAllData = function () {
                localStorageService.clearAll();
                delete $http.defaults.headers.common.Authorization;
            };
        }]);
})();
/**
 * Created by evgen on 07.02.2017.
 */
(function () {
    'use strict';
    angular.module('login.routes', [
        'login'
    ])
        .config(["$stateProvider", function ($stateProvider) {
            $stateProvider
                .state('login', {
                    url: "/login",
                    cache: false,
                    clear: true,
                    templateUrl: "src/login/login.html",
                    controller: 'LoginCtrl'
                });
        }]);
})();

/**
 * Created by evgen on 10.02.16.
 */
(function () {
    'use strict';
    angular.module('400handlers', [
        '400handlers.config',
        '400handlers.service'
    ])
        .factory('400handlers', ["$q", "$location", "handlersService", "HANDLERS400_CONFIG", function($q, $location, handlersService, HANDLERS400_CONFIG) {
            return {
                responseError: function(response) {
                    //check if we know this error or not...
                    for(var i = 0; i < HANDLERS400_CONFIG.length; i++) {
                        var _error = HANDLERS400_CONFIG[i];

                        if (response.status*1 === _error.status){
                            console.log(_error.status + ' inrerceptor is working');

                            //we need timer to avoid multiple allerts in a second
                            if (!handlersService.getSetting('timer') || Date.now() - handlersService.getSetting('timer') > 5000) {
                                if (_error.path) {
                                    $location.path(_error.path);
                                } else if (_error.message) {
                                    alert(_error.message);
                                }
                                handlersService.setSettings({timer:Date.now()});
                            }
                        }
                    }
                    return $q.reject(response);
                }
            };
        }]);
})();
/**
 * Created by evgen on 02.09.16.
 */
(function () {
    'use strict';
    angular.module('400handlers.service', [])
        .service('handlersService', function () {
            var _settings = {};

            this.getSetting = function (key) {
                return _settings[key];
            };
            this.setSettings = function (Obj) {
                if(typeof Obj === 'object') {
                    for (var key in Obj) {
                        if (Obj.hasOwnProperty(key)) {
                            _settings[key] = Obj[key];
                        }
                    }
                }
            };
        });
})();
/**
 * Created by evgen on 18.09.15.
 */
(function () {
    'use strict';
    angular.module('inputNumberValidation', [
        'regexp.config'
    ])
        .directive('inputNumberValidator', ["REGEXP_CONFIG", function (REGEXP_CONFIG) {
            return {
                restrict: 'A',
                link: function ($scope, element, attrs) {
                    element.bind("keypress", function (event) {
                        var ch;

                        function getChar(event) {
                            console.log('event.which',event.which);
                            console.log('event.charCode',event.charCode);
                            if (event.which !== 0 && event.charCode !== 0) {
                                if (event.which < 32) return null;
                                return String.fromCharCode(event.which);
                            }
                            return null;
                        }

                        ch = getChar(event);
                        var _futureValue = element[0].value + ch;
                        var __regexp;
                        if (attrs.inputNumberValidator) {
                            __regexp = REGEXP_CONFIG.numberWithTwoDigitsAfterDot;
                        } else {
                            __regexp = REGEXP_CONFIG.numberWithoutDot;
                        }
                        if(!__regexp.test(_futureValue)){
                            event.preventDefault();
                        }
                    });
                }
            };
        }]);
})();
/**
 * Created by evgen on 20.11.15.
 */
(function() {
    'use strict';
    angular.module('regexp.config', [])
        .constant("REGEXP_CONFIG", {
            numberWithTwoDigitsAfterDot:/^[0-9]*\.?[0-9]{0,2}$/,
            numberWithoutDot:/^[0-9]*$/
        });
}());
/**
 * Created by evgen on 12.11.15.
 */
(function () {
    'use strict';
    angular.module('checkConnection.service', [

    ])
        .service('CheckConnectionService', function () {
            this.checkConnection = function () {
                var networkState = navigator.network.connection.type;
                console.log('Network state: ', networkState);

                var states = {};
                states[Connection.UNKNOWN]  = 'Unknown connection';
                states[Connection.ETHERNET] = 'Ethernet connection';
                states[Connection.WIFI]     = 'WiFi connection';
                states[Connection.CELL_2G]  = 'Cell 2G connection';
                states[Connection.CELL_3G]  = 'Cell 3G connection';
                states[Connection.CELL_4G]  = 'Cell 4G connection';
                states[Connection.NONE]     = 'No network connection';

                return networkState !== Connection.NONE;
            }
        });
})();
/**
 * Created by evgen on 18.09.15.
 */
(function () {
    'use strict';
    angular.module('loader.service', [
        'checkConnection.service',
        'string.config'
    ])
        .service("LoaderService", ["$ionicLoading", "CheckConnectionService", "STRING_CONFIG", function ($ionicLoading, CheckConnectionService, STRING_CONFIG) {
            this.initLoader = function () {
                function Loader() {
                    return {
                        show: function () {
                            if(window.device) {
                                var _connection = CheckConnectionService.checkConnection();
                                if (_connection) {
                                    $ionicLoading.show({
                                        template: STRING_CONFIG.loading
                                    });
                                } else {
                                    $ionicLoading.hide();
                                    alert(STRING_CONFIG.disconnect);
                                    return false;
                                }
                            } else {
                                $ionicLoading.show({
                                    template: STRING_CONFIG.loading
                                });
                            }
                        },
                        hide: function () {
                            $ionicLoading.hide();
                        }
                    };
                }

                return new Loader();
            };
        }]);
}());
/**
 * Created by evgen on 18.01.17.
 */
(function () {
	'use strict';
	angular.module('ionicPopupWrapper.service', [])
		.service('IonicPopupWrapperService', ["$ionicPopup", function ($ionicPopup) {
			this.confirm = function (settings) {
				//Need to ask if sure delete budgetCategory and all related items
				var confirmPopup = $ionicPopup.alert({
					title: settings.title || 'Attention',
					template: settings.template,
					buttons: [
						{
							text: settings.schema === 'YES_NO' && 'NO' || 'Cancel',
							type: 'ta-blue',
							onTap: settings.cancel_cl
						},
						{
							text: settings.schema === 'YES_NO' && 'YES' || 'OK',
							type: 'ta-red',
							onTap: settings.ok_cb
						}
					]
				});
			};
		}])
})();
/**
 * Created by evgen on 07.02.2017.
 */
(function () {
    'use strict';
    var __modules = [
        'ngResource',
        'ngCordova',
        'ui.router',
        'LocalStorageModule',
        'ionic',
        'templates',
        // custom
        'login.routes',
        'inAppPurchases.routes',
        '400handlers'
    ];

    angular
        .module('iap', __modules)
        .config(["$urlRouterProvider", "$compileProvider", "$resourceProvider", "$httpProvider", "localStorageServiceProvider", function ($urlRouterProvider, $compileProvider, $resourceProvider, $httpProvider, localStorageServiceProvider) {
            //default page when unknown ulr is entered
            $urlRouterProvider.otherwise("login");

            //prevent 'unsafe' addition for 'content://' img src
            $compileProvider.imgSrcSanitizationWhitelist(/^\s*(https?|ftp|mailto|content|file):/);

            $resourceProvider.defaults.stripTrailingSlashes = false;
            $httpProvider.interceptors.push('400handlers');

            localStorageServiceProvider
                .setPrefix('iap');
        }])
        .run(["$http", "$state", "$rootScope", "$stateParams", "$cordovaStatusbar", function ($http, $state, $rootScope, $stateParams, $cordovaStatusbar) {
            $state.go("login");

            document.addEventListener("deviceready", onDeviceReady, false);    // device APIs are available
            function onDeviceReady() {
                if (device.platform !== "Android") {
                    StatusBar.overlaysWebView(true);
                    //default value of this in lightContent, so need also to write this in config.xml
                    StatusBar.styleDefault();
                    //this makes statusbar independent from app - NOT under the header of app
                    $cordovaStatusbar.overlaysWebView(true);
                    //need this to prevent showing a black space under the login form while keyboard is appearing
                    cordova.plugins.Keyboard.disableScroll(true);
                    cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
                }
            }
        }]);
})();
